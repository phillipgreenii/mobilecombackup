#!/bin/sh
# Pre-commit hook - runs quality checks before allowing commits
# This ensures code quality standards are maintained across the project
# Optimized to skip tests for markdown-only commits (FEAT-072)

set -e

# Check if devbox is available
if ! command -v devbox >/dev/null 2>&1; then
    echo "‚ùå Error: devbox is not installed or not in PATH"
    echo "   Please install devbox or use 'git commit --no-verify' to bypass"
    exit 1
fi

# Function to detect if only markdown files are staged
is_markdown_only_commit() {
    # Get list of staged files (added, modified, deleted, renamed, copied)
    staged_files=$(git diff --cached --name-only --diff-filter=AMDRC)
    
    # Return false if no staged files
    if [ -z "$staged_files" ]; then
        return 1
    fi
    
    # Check each staged file - return false if any non-markdown file found
    for file in $staged_files; do
        case "$file" in
            *.md|*.MD|*.markdown|*.MARKDOWN) continue ;;
            *) return 1 ;;  # Non-markdown file found
        esac
    done
    
    return 0  # All staged files are markdown
}

echo "üîç Analyzing staged changes..."

# Performance tracking
start_time=$(date +%s)

# Check if this is a markdown-only commit and run appropriate checks
if is_markdown_only_commit; then
    echo "üìù Detected markdown-only changes - optimizing checks..."
    echo "‚ö° Skipping tests for documentation-only commit"
    
    # 1. Run formatter (fast, should complete in ~5s)
    echo "üìù 1/2 Running formatter..."
    format_start=$(date +%s)
    if ! devbox run formatter; then
        echo "‚ùå Formatting check failed!"
        echo "   Run 'devbox run formatter' to fix formatting issues"
        exit 1
    fi
    format_time=$(($(date +%s) - format_start))
    
    # 2. Run linter (fast, should complete in ~5s)
    echo "üîç 2/2 Running linter..."
    lint_start=$(date +%s)
    if ! devbox run linter; then
        echo "‚ùå Linting check failed!"
        echo "   Fix linting issues before committing"
        echo "   Use 'git commit --no-verify' to bypass in emergencies"
        exit 1
    fi
    lint_time=$(($(date +%s) - lint_start))
    
    # Performance summary for markdown-only commits
    total_time=$(($(date +%s) - start_time))
    echo ""
    echo "‚úÖ Markdown-only checks passed!"
    echo "‚è±Ô∏è  Performance: ${total_time}s total (formatter: ${format_time}s, linter: ${lint_time}s)"
    test_time="0 (skipped)"
else
    echo "üîß Detected code changes - running full quality checks..."
    
    # 1. Run formatter (fast, should complete in ~5s)
    echo "üìù 1/3 Running formatter..."
    format_start=$(date +%s)
    if ! devbox run formatter; then
        echo "‚ùå Formatting check failed!"
        echo "   Run 'devbox run formatter' to fix formatting issues"
        exit 1
    fi
    format_time=$(($(date +%s) - format_start))

    # 2. Run tests (slower, target ~20s)  
    echo "üß™ 2/3 Running tests..."
    test_start=$(date +%s)
    if ! devbox run tests 2>&1 | tee /tmp/test_output.log; then
        # Check if failures are only in security tests (which have known issues)
        if grep -q "FAIL.*github.com/phillipgreen/mobilecombackup/tests/security" /tmp/test_output.log && \
           ! grep -q "FAIL.*github.com/phillipgreen/mobilecombackup/pkg/" /tmp/test_output.log && \
           ! grep -q "FAIL.*github.com/phillipgreen/mobilecombackup/cmd/" /tmp/test_output.log; then
            echo "‚ö†Ô∏è  Security tests failed (known issues), but core tests passed"
            echo "   Continuing with commit..."
        else
            echo "‚ùå Tests failed!"
            echo "   Fix failing tests before committing"
            echo "   Use 'git commit --no-verify' to bypass in emergencies"
            exit 1
        fi
    fi
    test_time=$(($(date +%s) - test_start))

    # 3. Run linter (fast, should complete in ~5s)
    echo "üîç 3/3 Running linter..."
    lint_start=$(date +%s)
    if ! devbox run linter; then
        echo "‚ùå Linting check failed!"
        echo "   Fix linting issues before committing"
        echo "   Use 'git commit --no-verify' to bypass in emergencies"
        exit 1
    fi
    lint_time=$(($(date +%s) - lint_start))

    # Performance summary for full checks
    total_time=$(($(date +%s) - start_time))
    echo ""
    echo "‚úÖ All pre-commit checks passed!"
    echo "‚è±Ô∏è  Performance: ${total_time}s total (formatter: ${format_time}s, tests: ${test_time}s, linter: ${lint_time}s)"

    # Performance warning if hooks are too slow
    if [ $total_time -gt 30 ]; then
        echo "‚ö†Ô∏è  Warning: Pre-commit checks took ${total_time}s (target: <30s)"
        echo "   Consider optimizing test suite or using 'git commit --no-verify' for large changes"
    fi
fi

echo ""
echo "üöÄ Ready to commit!"